<?xml version="1.0" encoding="UTF-8" ?>

<!-- DTD 선언 -->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	mapper 영역 안에 구문 작성
	- namespace: mapper 간 충돌을 방지하기 위한 이름(필수)(유일)
 -->
<mapper namespace="product">
	<!--
		필요한 구문 작성
		- 가급적 하나의 테이블만 접근하도록 구성
	 	- CRUD에 맞는 태그 사용
	 		- C: insert
	 		- R: select
	 		- U: update
	 		- D: delete
	 	
	 	- id: 외부에서 구문을 호출하기 위한 식별자(namespace와 함께 사용)
	 	- parameterType: 구문을 실행하기 위해 전달되는 데이터의 형태(별칭 사용 가능, alias)
	 	- resultType: 결과물(ResultSet)이 반환될 형태. 단일/목록 모두 단위 형태를 기재

	 	- #{name}: 전달되는 데이터 묶음에서 name이라는 이름을 가진 데이터를 형태에 맞게 채워라(동적 바인딩)
	 -->
	 
	<insert id="add" parameterType="product">
		insert into product
		values(product_seq.nextval, #{name}, #{price}, sysdate)
	</insert>

	<select id="list" parameterType="map" resultType="product">
		select * from product
		
		<where>
			<!-- 검색분류와 검색어가 존재한다면 -->
			<if test="type != null and type != '' and keyword != null">
				<!-- 어떤 형태든 일치검색 -->
				<!-- AND ${type} = #{keyword} -->
				
				<!-- 
					type의 종류에 따라 다른 검색 실행
					- type=no: 숫자 일치 검색
					- type=name: 문자열 유사 검색
					- type=price: 숫자 일치 검색
					- type=reg: 날짜 유사 검색
				 -->
				 
				 AND
				 
				 <choose>
					<when test="type == 'no' or type == 'price'">
						${type} = #{keyword}
					</when>				 
				 
				 	<when test="type == 'name'">
				 		instr(${type}, #{keyword}) > 0
				 	</when>
				 
				 	<otherwise>
				 		to_char(${type}, 'YYYY-MM-DD') = #{keyword}
				 	</otherwise>
				 
				 </choose>
			</if>
		</where>
		 order by ${category} ${order}
	</select>

	<select id="find" parameterType="long" resultType="product">
		select * from product
		 where no = #{no}
	</select>
	

</mapper>













