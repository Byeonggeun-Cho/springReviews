<?xml version="1.0" encoding="UTF-8" ?>

<!-- DTD 선언 -->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	mapper 영역 안에 구문 작성
	- namespace: mapper 간 충돌을 방지하기 위한 이름(필수)(유일)
 -->
<mapper namespace="product">
	<!--
		필요한 구문 작성
		- 가급적 하나의 테이블만 접근하도록 구성
	 	- CRUD에 맞는 태그 사용
	 		- C: insert
	 		- R: select
	 		- U: update
	 		- D: delete
	 	
	 	- id: 외부에서 구문을 호출하기 위한 식별자(namespace와 함께 사용)
	 	- parameterType: 구문을 실행하기 위해 전달되는 데이터의 형태(별칭 사용 가능, alias)
	 	- resultType: 결과물(ResultSet)이 반환될 형태. 단일/목록 모두 단위 형태를 기재

	 	- #{name}: 전달되는 데이터 묶음에서 name이라는 이름을 가진 데이터를 형태에 맞게 채워라(동적 바인딩)
	 	- ${name}: 전달되는 값을 어떠한 처리도 없이 그대로 배치(정적 바인딩)
	 -->
	 
	 <insert id="add" parameterType="product">
	 	insert into product(no, name, price, reg)
	 	values(product_seq.nextval, #{name}, #{price}, sysdate)
	 </insert>
	 
	 <select id="list" parameterType="string" resultType="product">
	 	select * from product
	 	
	 	<if test="name != null or name != ''">
			where instr(name, #{name}) > 0
	 	</if>
	 </select>
	 
 	 <select id="list2" parameterType="map" resultType="product">
	 	select * from product
	 	
	 	<where>
		 	<if test="name != null and name != ''">
				AND
				instr(name, #{name}) > 0
		 	</if>
		 	
		 	<if test="price != null">
		 		AND
		 		price = #{price}
		 	</if>

		 	<if test="start != null and end != null">
		 		AND
		 		price between #{start} and #{end}
		 	</if>
	 	</where>
	 </select>

	<select id="list3" parameterType="map" resultType="product">
		select * from product order by ${category} ${order}
	</select>	 
	
	<!-- 참이슬이나 처음처럼이라는 이름을 가진 항목을 검색 --> 
	<select id="list4" resultType="product">
		select * from product
		 where name in('참이슬', '처음처럼')
	</select>

	 
</mapper>













