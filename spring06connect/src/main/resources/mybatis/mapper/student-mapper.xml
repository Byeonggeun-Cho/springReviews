<?xml version="1.0" encoding="UTF-8" ?>

<!-- DTD 선언 -->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	mapper 영역 안에 구문 작성
	- namespace: mapper 간 충돌을 방지하기 위한 이름(필수)(유일)
 -->
<mapper namespace="student">
	<!--
		필요한 구문 작성
		- 가급적 하나의 테이블만 접근하도록 구성
	 	- CRUD에 맞는 태그 사용
	 		- C: insert
	 		- R: select
	 		- U: update
	 		- D: delete
	 	
	 	- id: 외부에서 구문을 호출하기 위한 식별자(namespace와 함께 사용)
	 	- parameterType: 구문을 실행하기 위해 전달되는 데이터의 형태(별칭 사용 가능, alias)
	 	- resultType: 결과물(ResultSet)이 반환될 형태. 단일/목록 모두 단위 형태를 기재

	 	- #{name}: 전달되는 데이터 묶음에서 name이라는 이름을 가진 데이터를 형태에 맞게 채워라(동적 바인딩)
	 -->
	 
	<insert id="add" parameterType="map">
		insert into student
		values(#{name}, #{score})
	</insert>
	
	<insert id="add2" parameterType="student">
		insert into student
		values(#{name}, #{score})
	</insert>
	 
	
	<!-- 
		조회용 구문
	 --> 
	<select id="list" resultType="student">
		select * from student
		 order by score desc
	</select>
	
	<!-- 
		이름으로 검색 구문
		- like는 시작 검색이 빠름. 앞에 %가 붙으면 성능 저하가 발생
		- instr은 전반적인 검색이 빠름
	 -->
	<select id="search" parameterType="string" resultType="student">
		select * from student
<!-- 	 where #{name} like '%' || #{name} || '%' -->
		 where instr(name, #{name}) > 0
		 order by score desc
	</select>
	
	
	<!-- 
		수정 구문: 이름으로 점수를 수정하도록 구성
		- parameterType: 이름(String) + 점수(int) = map 또는 student
		- resultType: 없음
	 -->
	<update id="edit" parameterType="student">
		update student
		   set score = #{score}
		 where name = #{name}
	</update> 
	
	
	<delete id="remove" parameterType="string">
		delete student
		 where name = #{name}
	</delete>
	 
</mapper>













